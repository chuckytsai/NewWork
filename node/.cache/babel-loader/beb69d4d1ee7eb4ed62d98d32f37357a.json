{"ast":null,"code":"var _jsxFileName = \"D:\\\\JsMff\\\\src\\\\components\\\\Marketing\\\\TransferReact.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Transfer } from \"antd\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TransferReact = ({\n  mockData\n}) => {\n  _s();\n\n  const [targetKeys, setTargetKeys] = useState(\"\");\n  const [selectedKeys, setSelectedKeys] = useState([]);\n\n  const onChange = (nextTargetKeys, direction, moveKeys) => {\n    console.log(\"targetKeys:\", nextTargetKeys);\n    console.log(\"direction:\", direction);\n    console.log(\"moveKeys:\", moveKeys);\n    setTargetKeys(nextTargetKeys);\n  };\n\n  const onSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n    console.log(\"sourceSelectedKeys:\", sourceSelectedKeys);\n    console.log(\"targetSelectedKeys:\", targetSelectedKeys);\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n  };\n\n  const onScroll = (direction, e) => {\n    console.log(\"direction:\", direction);\n    console.log(\"target:\", e.target);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Transfer, {\n    dataSource: mockData,\n    listStyle: {\n      width: \"100%\"\n    },\n    titles: [\"Source\", \"Target\"],\n    targetKeys: targetKeys,\n    selectedKeys: selectedKeys,\n    onChange: onChange,\n    onSelectChange: onSelectChange,\n    onScroll: onScroll,\n    render: item => item.itemName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TransferReact, \"3Vg5raMCg78b/NhsPxwtdHnxgQI=\");\n\n_c = TransferReact;\nexport default TransferReact;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransferReact\");","map":{"version":3,"sources":["D:/JsMff/src/components/Marketing/TransferReact.js"],"names":["React","useState","Transfer","TransferReact","mockData","targetKeys","setTargetKeys","selectedKeys","setSelectedKeys","onChange","nextTargetKeys","direction","moveKeys","console","log","onSelectChange","sourceSelectedKeys","targetSelectedKeys","onScroll","e","target","width","item","itemName"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,MAAzB;;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AACtC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACM,YAAD,EAAeC,eAAf,IAAkCP,QAAQ,CAAC,EAAD,CAAhD;;AACA,QAAMQ,QAAQ,GAAG,CAACC,cAAD,EAAiBC,SAAjB,EAA4BC,QAA5B,KAAyC;AACxDC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BJ,cAA3B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,SAA1B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,QAAzB;AACAN,IAAAA,aAAa,CAACI,cAAD,CAAb;AACD,GALD;;AAOA,QAAMK,cAAc,GAAG,CAACC,kBAAD,EAAqBC,kBAArB,KAA4C;AACjEJ,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCE,kBAAnC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCG,kBAAnC;AACAT,IAAAA,eAAe,CAAC,CAAC,GAAGQ,kBAAJ,EAAwB,GAAGC,kBAA3B,CAAD,CAAf;AACD,GAJD;;AAMA,QAAMC,QAAQ,GAAG,CAACP,SAAD,EAAYQ,CAAZ,KAAkB;AACjCN,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BH,SAA1B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBK,CAAC,CAACC,MAAzB;AACD,GAHD;;AAKA,sBACE,QAAC,QAAD;AACE,IAAA,UAAU,EAAEhB,QADd;AAEE,IAAA,SAAS,EAAE;AACTiB,MAAAA,KAAK,EAAE;AADE,KAFb;AAKE,IAAA,MAAM,EAAE,CAAC,QAAD,EAAW,QAAX,CALV;AAME,IAAA,UAAU,EAAEhB,UANd;AAOE,IAAA,YAAY,EAAEE,YAPhB;AAQE,IAAA,QAAQ,EAAEE,QARZ;AASE,IAAA,cAAc,EAAEM,cATlB;AAUE,IAAA,QAAQ,EAAEG,QAVZ;AAWE,IAAA,MAAM,EAAGI,IAAD,IAAUA,IAAI,CAACC;AAXzB;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CApCD;;GAAMpB,a;;KAAAA,a;AAsCN,eAAeA,aAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Transfer } from \"antd\";\r\n\r\nconst TransferReact = ({ mockData }) => {\r\n  const [targetKeys, setTargetKeys] = useState(\"\");\r\n  const [selectedKeys, setSelectedKeys] = useState([]);\r\n  const onChange = (nextTargetKeys, direction, moveKeys) => {\r\n    console.log(\"targetKeys:\", nextTargetKeys);\r\n    console.log(\"direction:\", direction);\r\n    console.log(\"moveKeys:\", moveKeys);\r\n    setTargetKeys(nextTargetKeys);\r\n  };\r\n\r\n  const onSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\r\n    console.log(\"sourceSelectedKeys:\", sourceSelectedKeys);\r\n    console.log(\"targetSelectedKeys:\", targetSelectedKeys);\r\n    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\r\n  };\r\n\r\n  const onScroll = (direction, e) => {\r\n    console.log(\"direction:\", direction);\r\n    console.log(\"target:\", e.target);\r\n  };\r\n\r\n  return (\r\n    <Transfer\r\n      dataSource={mockData}\r\n      listStyle={{\r\n        width: \"100%\",\r\n      }}\r\n      titles={[\"Source\", \"Target\"]}\r\n      targetKeys={targetKeys}\r\n      selectedKeys={selectedKeys}\r\n      onChange={onChange}\r\n      onSelectChange={onSelectChange}\r\n      onScroll={onScroll}\r\n      render={(item) => item.itemName}\r\n    />\r\n  );\r\n};\r\n\r\nexport default TransferReact;\r\n"]},"metadata":{},"sourceType":"module"}